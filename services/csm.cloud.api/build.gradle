/*
 * ************************************************************************
 *
 *  Copyright:       Robert Bosch Power Tools GmbH, 2018 - 2022
 *
 * ************************************************************************
 */

import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.InventoryHtmlReportRenderer

buildscript {
    ext {
        csmCloudCommonCoreVersion = "12.0.0"
        detektVersion = "${externalCatalog.versions.detekt.get()}"
        kotlinVersion = "${externalCatalog.versions.kotlin.get()}"
        mavenAzureArtifact = {
            credentials {
                username "AZURE_ARTIFACTS"
                password System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") ?: "$azureArtifactsGradleAccessToken"
            }
            url "https://pkgs.dev.azure.com/pt-iot/_packaging/Artifacts/maven/v1"
        }
        snippetsDir = file("build/generated-snippets")
        springBootVersion = "${externalCatalog.versions.springBoot.get()}"
        springCloudVersion = "${externalCatalog.versions.springCloud.get()}"
        springRestDocsAsciiDoctorExtension = "${externalCatalog.versions.springRestDocsAsciiDoctorExtension.get()}"
    }
}

plugins {
    id "jacoco"
    id "maven-publish"

    alias(externalCatalog.plugins.asciiDoctor)
    alias(externalCatalog.plugins.dependencyLicenseReport)
    alias(externalCatalog.plugins.detekt)
    alias(externalCatalog.plugins.docker)
    alias(externalCatalog.plugins.gitProperties)
    alias(externalCatalog.plugins.kotlinJvm)
    alias(externalCatalog.plugins.kotlinKapt)
    alias(externalCatalog.plugins.kotlinPluginSpring)
    alias(externalCatalog.plugins.owaspDependencyCheck)
    alias(externalCatalog.plugins.sonarqube)
    alias(externalCatalog.plugins.springBoot)
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
java.toolchain.languageVersion.set(JavaLanguageVersion.of(21))

configurations {
    // Configuration as described here: https://github.com/spring-projects/spring-restdocs/issues/680
    asciidoctorExtensions
}

configurations.all {
    resolutionStrategy {
        // this avoids a caching snapshot dependencies so that the latest version is always downloaded.
        cacheChangingModulesFor 0, 'minutes'
    }
}

// Configurations in alphabetical order

asciidoctor {
    attributes "snippets": snippetsDir
    configurations 'asciidoctorExtensions'
    dependsOn test
    forkOptions {
        jvmArgs = [
                '--add-opens', 'java.base/java.io=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED'
        ]
    }
    inputs.dir snippetsDir
}

bootJar {
    archiveBaseName = project.name
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into "BOOT-INF/classes/static/docs"
    }
}

bootRun {
    systemProperties = System.properties
}

dependencies {
    implementation platform("com.bosch.pt:csm.cloud.dependency.bom-external:${gradle.externalBomVersion}")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")

    asciidoctorExtensions("org.springframework.restdocs:spring-restdocs-asciidoctor:$springRestDocsAsciiDoctorExtension")

   // runtimeOnly("io.netty:netty-resolver-dns-native-macos::osx-aarch_64")

    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion")

    implementation("com.bosch.pt:csm.cloud.common.core:$csmCloudCommonCoreVersion")

    implementation("com.datadoghq:dd-trace-api")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.apache.commons:commons-lang3")
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")
    implementation("org.springframework.cloud:spring-cloud-starter-gateway")
    implementation("org.springframework.cloud:spring-cloud-starter-kubernetes-client-config") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    implementation("io.projectreactor.kotlin:reactor-kotlin-extensions")

    // Spring Security and OAuth
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.security:spring-security-oauth2-client")
    implementation("org.springframework.security:spring-security-oauth2-jose")
    implementation("org.springframework.security:spring-security-oauth2-resource-server")

    // Session Store in MongoDB for Authentication Flow
    implementation("org.springframework.session:spring-session-core")
    implementation("org.springframework.session:spring-session-data-mongodb")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb-reactive")

    implementation("org.springdoc:springdoc-openapi-starter-webflux-ui:2.2.0")

    //adds StepVerifier and other test classes for testing reactive
    testImplementation("io.projectreactor:reactor-test")
    testImplementation("io.mockk:mockk")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("com.ninja-squad:springmockk")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.restdocs:spring-restdocs-webtestclient")
    testImplementation("de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring3x")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.mock-server:mockserver-spring-test-listener:5.15.0")
    testImplementation("org.springframework.cloud:spring-cloud-starter-contract-stub-runner") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-web"
    }
}

dependencyCheck {
    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nuspecEnabled = false
    }
    failBuildOnCVSS = 11
    formats = ["HTML", "XML"]
    // A list of configurations to exclude
    // configurations.each { println it.name }
    skipConfigurations = [
            "asciidoctor",
            "checkstyle",
            "compileOnly",
            "compileClasspath",
            "detekt",
            "detektPlugins",
            "developmentOnly",
            "docker",
            "jacocoAgent",
            "jacocoAnt",
            "kaptTest",
            "spotbugs",
            "spotbugsPlugins",
            "spotbugsSlf4j",
            "testAnnotationProcessor",
            "testApi",
            "testApiDependenciesMetadata",
            "testCompile",
            "testCompileClasspath",
            "testCompileOnly",
            "testCompileOnlyDependenciesMetadata",
            "testImplementation",
            "testImplementationDependenciesMetadata",
            "testKotlinScriptDef",
            "testKotlinScriptDefExtensions",
            "testRuntime",
            "testRuntimeClasspath",
            "testRuntimeOnly",
            "testRuntimeOnlyDependenciesMetadata"
    ]
}

detekt {
    buildUponDefaultConfig = true
    config = files("config/detekt-config.yml")
    input = files("src/main/kotlin", "src/test/kotlin")
}

dockerPrepare {
    dependsOn bootJar
}

docker {
    buildArgs(["JAR_FILE": "${bootJar.archiveFileName.get()}"])
    dependsOn build
    files bootJar.archiveFile.get()
    name "ptcsmacr.azurecr.io/com.bosch.pt/csm.cloud.api:$version"
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
    }
}

jar {
    // Disable plain jar creation
    enabled = false
}

licenseReport {
    excludeGroups = ["com.bosch.pt"]
    filters = [new LicenseBundleNormalizer()]
    renderers = [new InventoryHtmlReportRenderer()]
}

publishing {
    publications {
        jar(MavenPublication) {
            artifact bootJar
            artifactId = "csm.cloud.api"
            from components.java
            groupId = "com.bosch.pt"
        }
    }

    repositories {
        maven mavenAzureArtifact
    }
}

repositories {
    mavenCentral()
    maven { url "https://packages.confluent.io/maven/" }
    maven mavenAzureArtifact
}

sonarqube {
    def buildReason = project.hasProperty("BuildReason") && !BuildReason.isEmpty() ? BuildReason : "Build"
    def sourceBranch = project.hasProperty("SourceBranchName") && !SourceBranchName.isEmpty() ? SourceBranchName : "${gitBranch()}-local"

    println "$buildReason for branch $sourceBranch"
    properties {
        property "sonar.projectKey", "csm.cloud.api"
        property "sonar.projectName", "csm.cloud.api"
        property "sonar.coverage.exclusions", "**/application/**"

        // Disable some rules on some files
        property "sonar.issue.ignore.multicriteria", "k1,k2,k3,k4"

        // Cognitive Complexity of functions should not be too high (kotlin:S3776)
        property "sonar.issue.ignore.multicriteria.k1.ruleKey", "kotlin:S3776"
        property "sonar.issue.ignore.multicriteria.k1.resourceKey", "**/*.kt"
        // Track uses of "TO DO" tags (kotlin:S1135)
        property "sonar.issue.ignore.multicriteria.k2.ruleKey", "kotlin:S1135"
        property "sonar.issue.ignore.multicriteria.k2.resourceKey", "**/*.kt"
        // Functions should not have identical implementations (kotlin:S4144)
        property "sonar.issue.ignore.multicriteria.k3.ruleKey", "kotlin:S4144"
        property "sonar.issue.ignore.multicriteria.k3.resourceKey", "**/*.kt"
        // Function has more than 7 parameters
        property "sonar.issue.ignore.multicriteria.k4.ruleKey", "kotlin:S107"
        property "sonar.issue.ignore.multicriteria.k4.resourceKey", "**/*.kt"

        // If the pull request was manually triggered the BuildReason is "Manual", else "PullRequest".
        // Whether the BuildReason is "PullRequest" or "Manual" we assume that a pull request has a SourceBranchName "merge".
        if ("merge" != sourceBranch) {
            property "sonar.branch.name", sourceBranch
        }
    }
}

// Workaround for now to get the spring boot tests running with gradle
sourceSets {
    main.java.srcDirs += "src/main/kotlin/"
    test.java.srcDirs += "src/test/kotlin/"
}

springBoot {
    buildInfo()
}

def isLocal = !project.hasProperty("BuildReason") || BuildReason.isEmpty()

test {
    doFirst { jvmArgs = ['-Xshare:off'] }
    finalizedBy jacocoTestReport
    if (isLocal)
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    outputs.dir snippetsDir
    useJUnitPlatform()
}

def isMergeBranch = project.hasProperty("SourceBranchName") && !SourceBranchName.isEmpty() && "merge" == SourceBranchName
def isIntegrationBranch = project.hasProperty("SourceBranchName") && !SourceBranchName.isEmpty() && "integration" == SourceBranchName
if (isLocal || isMergeBranch || isIntegrationBranch) {
    check.dependsOn dependencyCheckAnalyze
}

static def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}
version='1.0.0'
group='com.bosch.pt'
