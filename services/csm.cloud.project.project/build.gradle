/*
 * ************************************************************************
 *
 *  Copyright:       Robert Bosch Power Tools GmbH, 2018 - 2021
 *
 * ************************************************************************
 */


import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.InventoryHtmlReportRenderer

buildscript {
    ext {
        asciiDoctorVersion = "${externalCatalog.versions.springRestDocsAsciiDoctorExtension.get()}"
        csmCloudCommonAvroVersion = "10.0.0"
        csmCloudCommonBlobVersion = "10.0.0"
        csmCloudCommonCoreVersion = "12.0.0"
        csmCloudCommonEventConsumerVersion = "4.0.0"
        csmCloudCommonKafkaVersion = "4.0.0"
        csmCloudCommonMySqlVersion = "4.0.0"
        csmCloudCommonStreamableVersion = "13.0.0"
        csmCloudCommonWebVersion = "8.0.0"
        csmCloudCompanyAvroVersion = "10.0.0"
        csmCloudFeaturetoggleAvroVersion = "4.0.0"
        csmCloudFeaturetoggleLibVersion = "4.0.0"
        csmCloudImageAvroVersion = "3.0.0"
        csmCloudJobAvroVersion = "6.0.0"
        csmCloudProjectAvroVersion = "15.0.0"
        csmCloudUserAvroVersion = "11.0.0"
        detektVersion = "${externalCatalog.versions.detekt.get()}"
        hibernateVersion = "${externalCatalog.versions.hibernate.get()}"
        kotlinVersion = "${externalCatalog.versions.kotlin.get()}"
        mavenAzureArtifact = {
            credentials {
                username "AZURE_ARTIFACTS"
                password System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") ?: "$azureArtifactsGradleAccessToken"
            }
            url "https://pkgs.dev.azure.com/pt-iot/_packaging/Artifacts/maven/v1"
        }
        mpxjVersion = "12.5.0"
        snippetsDir = file("build/generated-snippets")
        springBootVersion = "${externalCatalog.versions.springBoot.get()}"
        springCloudVersion = "${externalCatalog.versions.springCloud.get()}"
    }
}

plugins {
    id "com.bosch.pt.csm.cloud.translations" version "4.0.0"
    id "jacoco"
    id "maven-publish"

    // needed because of mpxj which uses jakarta.xml.bind 2.3.2 which still uses javax
    // can be removed as soon as mpxj uses jakarta
    id "com.netflix.nebula.jakartaee-migration" version "0.21.0"

    alias(externalCatalog.plugins.asciiDoctor)
    alias(externalCatalog.plugins.dependencyLicenseReport)
    alias(externalCatalog.plugins.detekt)
    alias(externalCatalog.plugins.docker)
    alias(externalCatalog.plugins.gitProperties)
    alias(externalCatalog.plugins.kotlinJvm)
    alias(externalCatalog.plugins.kotlinKapt)
    alias(externalCatalog.plugins.kotlinPluginJpa)
    alias(externalCatalog.plugins.kotlinPluginSpring)
    alias(externalCatalog.plugins.owaspDependencyCheck)
    alias(externalCatalog.plugins.sonarqube)
    alias(externalCatalog.plugins.springBoot)

}

allOpen {
    annotation("jakarta.persistence.Embeddable")
    annotation("jakarta.persistence.Entity")
    annotation("jakarta.persistence.MappedSuperclass")
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
java.toolchain.languageVersion.set(JavaLanguageVersion.of(21))

configurations {
    // Configuration as described here: https://github.com/spring-projects/spring-restdocs/issues/680
    asciidoctorExtensions
}

configurations.all {
    resolutionStrategy {
        // this avoids a caching snapshot dependencies so that the latest version is always downloaded.
        cacheChangingModulesFor 0, 'minutes'

        eachDependency { details ->
            if (details.requested.group == 'io.swagger.core.v3') {
                details.useVersion("2.2.20")
                details.because('Swagger ui and Kafka Avro serializer incompatible dependency io.swagger.core.v3:swagger-annotations')
                // see: https://stackoverflow.com/questions/75732794/spring-boot-3-and-swagger-ui-java-lang-nosuchmethoderror-io-swagger-v3-oas-ann
            }
        }
    }
}

tasks.configureEach {
    if (name.equals("kaptGenerateStubsKotlin")) {
        dependsOn("generateMessagesKeyKotlin")
    }
    if (name.equals("kaptKotlin")) {
        dependsOn("generateMessagesKeyKotlin")
    }
}

tasks.withType(io.gitlab.arturbosch.detekt.Detekt).configureEach {
    dependsOn generateMessagesKeyKotlin
}

compileKotlin {
    dependsOn generateMessagesKeyKotlin
}

// needed because of mpxj which uses jakarta.xml.bind 2.3.2 which still uses javax
// can be removed as soon as mpxj uses jakarta
jakartaeeMigration {
    migrate()
}

// Configurations in alphabetical order

asciidoctor {
    attributes "snippets": snippetsDir
    configurations 'asciidoctorExtensions'
    dependsOn test
    forkOptions {
        jvmArgs = [
                '--add-opens', 'java.base/java.io=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED'
        ]
    }
    inputs.dir snippetsDir
    failureLevel "WARN"
}

bootJar {
    archiveBaseName = project.name
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into "BOOT-INF/classes/static/docs/projects"
    }
}

bootRun {
    systemProperties = System.properties
}

task checkLibVersions() {
    doLast {
        def stdoutStream = new ByteArrayOutputStream()
        exec {
            commandLine "sh", "-c", "curl https://api.github.com/repos/joniles/mpxj/releases/latest -s | jq .tag_name -r"
            standardOutput = stdoutStream
        }
        def currentVersion = "v$mpxjVersion"
        def latestReleaseVersion = "${stdoutStream.toString().trim()}"
        println "Current mpxj version is \"$currentVersion\" and latest version is \"$latestReleaseVersion\""
        assert "$currentVersion" == "$latestReleaseVersion"
    }
}

dependencies {
    implementation platform("com.bosch.pt:csm.cloud.dependency.bom-external:${gradle.externalBomVersion}")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")

    asciidoctorExtensions("org.springframework.restdocs:spring-restdocs-asciidoctor:$asciiDoctorVersion")

    kapt("org.hibernate.orm:hibernate-jpamodelgen:$hibernateVersion")

    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion")

    implementation("com.bosch.pt:csm.cloud.common.avro:$csmCloudCommonAvroVersion")
    implementation("com.bosch.pt:csm.cloud.common.blob:$csmCloudCommonBlobVersion")
    implementation("com.bosch.pt:csm.cloud.common.event-consumer:$csmCloudCommonEventConsumerVersion")
    implementation("com.bosch.pt:csm.cloud.common.kafka:$csmCloudCommonKafkaVersion")
    implementation("com.bosch.pt:csm.cloud.common.mysql:$csmCloudCommonMySqlVersion")
    implementation("com.bosch.pt:csm.cloud.common.streamable:$csmCloudCommonStreamableVersion")
    implementation("com.bosch.pt:csm.cloud.common.web:$csmCloudCommonWebVersion")
    implementation("com.bosch.pt:csm.cloud.company.avro:$csmCloudCompanyAvroVersion")
    implementation("com.bosch.pt:csm.cloud.featuretoggle.avro:$csmCloudFeaturetoggleAvroVersion")
    implementation("com.bosch.pt:csm.cloud.featuretoggle.lib:$csmCloudFeaturetoggleLibVersion")
    implementation("com.bosch.pt:csm.cloud.image.avro:$csmCloudImageAvroVersion")
    implementation("com.bosch.pt:csm.cloud.job.avro:$csmCloudJobAvroVersion")
    implementation("com.bosch.pt:csm.cloud.project.avro:$csmCloudProjectAvroVersion")
    implementation("com.bosch.pt:csm.cloud.user.avro:$csmCloudUserAvroVersion")

    implementation("commons-codec:commons-codec")
    implementation("commons-io:commons-io")
    implementation("com.azure:azure-storage-blob")
    implementation("com.datadoghq:dd-trace-api")
    implementation("com.drewnoakes:metadata-extractor")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("com.google.guava:guava")
    implementation("com.mailjet:mailjet-client")
    implementation("com.opencsv:opencsv")
    implementation("io.confluent:kafka-avro-serializer")
    implementation("io.micrometer:micrometer-core")
    implementation("io.micrometer:micrometer-registry-statsd")
    implementation("io.opentracing:opentracing-api")
    implementation("io.opentracing:opentracing-util")
    implementation("javax.cache:cache-api")
    implementation("net.javacrumbs.shedlock:shedlock-provider-jdbc-template")
    implementation("net.javacrumbs.shedlock:shedlock-spring")
    implementation("net.sf.mpxj:mpxj:$mpxjVersion")
    implementation("org.apache.commons:commons-collections4")
    implementation("org.apache.commons:commons-lang3")
    implementation("org.apache.httpcomponents:httpcore")
    implementation("org.apache.kafka:kafka-clients")
    implementation("org.apache.tika:tika-core")
    implementation("org.ehcache:ehcache") { artifact { classifier = 'jakarta' } }
    implementation("org.flywaydb:flyway-core")
    implementation("org.flywaydb:flyway-mysql")
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.hibernate.orm:hibernate-core:$hibernateVersion")
    implementation("org.mariadb.jdbc:mariadb-java-client")
    implementation("org.mongodb:mongodb-driver-core")
    implementation("org.mongodb:mongodb-driver-sync")

    implementation("org.springframework.boot:spring-boot-configuration-processor")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-hateoas")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")
    implementation("org.springframework.cloud:spring-cloud-starter-kubernetes-client-config") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    implementation("org.springframework.kafka:spring-kafka")
    implementation("org.springframework.security:spring-security-data")

    implementation("org.springdoc:springdoc-openapi-starter-webmvc-api")

    testImplementation("com.bosch.pt:csm.cloud.common.avro:$csmCloudCommonAvroVersion:tests")
    testImplementation("com.bosch.pt:csm.cloud.common.core:$csmCloudCommonCoreVersion:tests")
    testImplementation("com.bosch.pt:csm.cloud.common.streamable:$csmCloudCommonStreamableVersion:tests")
    testImplementation("com.bosch.pt:csm.cloud.common.web:$csmCloudCommonWebVersion:tests")
    testImplementation("com.bosch.pt:csm.cloud.company.avro:$csmCloudCompanyAvroVersion:tests")
    testImplementation("com.bosch.pt:csm.cloud.featuretoggle.avro:$csmCloudFeaturetoggleAvroVersion:tests")
    testImplementation("com.bosch.pt:csm.cloud.image.avro::tests")
    testImplementation("com.bosch.pt:csm.cloud.job.avro:$csmCloudJobAvroVersion:tests")
    testImplementation("com.bosch.pt:csm.cloud.project.avro:$csmCloudProjectAvroVersion:tests")
    testImplementation("com.bosch.pt:csm.cloud.user.avro:$csmCloudUserAvroVersion:tests")

    testImplementation("com.ninja-squad:springmockk")
    testImplementation("com.squareup.okhttp3:mockwebserver")
    testImplementation("com.tngtech.archunit:archunit")
    testImplementation("de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring3x")
    testImplementation("io.mockk:mockk")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.hibernate.orm:hibernate-ant:$hibernateVersion")
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("com.h2database:h2")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation("org.springframework.boot:spring-boot-test-autoconfigure")
    testImplementation("org.springframework.restdocs:spring-restdocs-core")
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.springframework:spring-aspects")
}

dependencyCheck {
    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nuspecEnabled = false
        ossIndexEnabled = false
    }
    failBuildOnCVSS = 11
    formats = ["HTML", "XML"]
    // A list of configurations to exclude
    // configurations.each { println it.name }
    skipConfigurations = [
            "asciidoctor",
            "checkstyle",
            "compileOnly",
            "compileClasspath",
            "detekt",
            "detektPlugins",
            "developmentOnly",
            "docker",
            "jacocoAgent",
            "jacocoAnt",
            "kaptTest",
            "spotbugs",
            "spotbugsPlugins",
            "spotbugsSlf4j",
            "testAnnotationProcessor",
            "testApi",
            "testApiDependenciesMetadata",
            "testCompile",
            "testCompileClasspath",
            "testCompileOnly",
            "testCompileOnlyDependenciesMetadata",
            "testImplementation",
            "testImplementationDependenciesMetadata",
            "testKotlinScriptDef",
            "testKotlinScriptDefExtensions",
            "testRuntime",
            "testRuntimeClasspath",
            "testRuntimeOnly",
            "testRuntimeOnlyDependenciesMetadata"
    ]
}

detekt {
    buildUponDefaultConfig = true
    config = files("config/detekt-config.yml")
    input = files("src/main/kotlin", "src/test/kotlin")
}

dockerPrepare {
    dependsOn bootJar
}

docker {
    buildArgs(["JAR_FILE": "${bootJar.archiveFileName.get()}"])
    files bootJar.archiveFile.get()
    name "ptcsmacr.azurecr.io/com.bosch.pt/csm.cloud.project:$version"
}

generateMessagesKeyKotlin {
    inputFile file("src/main/resources/i18n/messages.properties")
    outputFile file("src/main/kotlin/com/bosch/pt/iot/smartsite/common/i18n/Key.kt")
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
    }
}

jar {
    // Disable plain jar creation
    enabled = false
}

licenseReport {
    excludeGroups = ["com.bosch.pt"]
    filters = [new LicenseBundleNormalizer()]
    renderers = [new InventoryHtmlReportRenderer()]
}

publishing {
    publications {
        jar(MavenPublication) {
            artifact bootJar
            artifactId = "csm.cloud.project"
            from components.java
            groupId = "com.bosch.pt"
        }
    }

    repositories {
        maven mavenAzureArtifact
    }
}

repositories {
    mavenCentral()
    maven { url "https://packages.confluent.io/maven/" }
    maven mavenAzureArtifact
}

sonarqube {
    def buildReason = project.hasProperty("BuildReason") && !BuildReason.isEmpty() ? BuildReason : "Build"
    def sourceBranch = project.hasProperty("SourceBranchName") && !SourceBranchName.isEmpty() ? SourceBranchName : "${gitBranch()}-local"

    println "$buildReason for branch $sourceBranch"
    properties {
        property "sonar.projectKey", "csm.cloud.project"
        property "sonar.projectName", "csm.cloud.project"
        property "sonar.exclusions", "src/test/java/**,**/Key.java,**/NoOpSerializer.java"
        property "sonar.coverage.exclusions", "**/application/**"

        // Disable some rules on some files
        property "sonar.issue.ignore.multicriteria", "j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,j15,j16,j17,j18,j19,j20,j21,j22,j23,k1,k2,k3,k4"
        // Make sure that command line arguments are used safely here (squid:S4823)
        property "sonar.issue.ignore.multicriteria.j1.ruleKey", "squid:S4823"
        property "sonar.issue.ignore.multicriteria.j1.resourceKey", "**/*.java"
        // Do not unconditionally return true in this method (squid:S3510)
        property "sonar.issue.ignore.multicriteria.j2.ruleKey", "squid:S3510"
        property "sonar.issue.ignore.multicriteria.j2.resourceKey", "**/*.java"
        // Either log this exception and handle it, or rethrow it with some contextual information (squid:S2139)
        property "sonar.issue.ignore.multicriteria.j3.ruleKey", "squid:S2139"
        property "sonar.issue.ignore.multicriteria.j3.resourceKey", "**/*.java"
        // Format specifiers should be used instead of string concatenation (squid:S3457)
        property "sonar.issue.ignore.multicriteria.j4.ruleKey", "squid:S3457"
        property "sonar.issue.ignore.multicriteria.j4.resourceKey", "**/*.java"
        // A field should not duplicate the name of its containing class (squid:S1700)
        property "sonar.issue.ignore.multicriteria.j5.ruleKey", "squid:S1700"
        property "sonar.issue.ignore.multicriteria.j5.resourceKey", "**/*.java"
        // Add at least one assertion to this test case (squid:S2699)
        property "sonar.issue.ignore.multicriteria.j6.ruleKey", "squid:S2699"
        property "sonar.issue.ignore.multicriteria.j6.resourceKey", "**/*.java"
        // Generic wildcard types should not be used in return parameters (squid:S1452)
        property "sonar.issue.ignore.multicriteria.j7.ruleKey", "squid:S1452"
        property "sonar.issue.ignore.multicriteria.j7.resourceKey", "**/*.java"
        // "Preconditions" and logging arguments should not require evaluation (squid:S2629)
        property "sonar.issue.ignore.multicriteria.j8.ruleKey", "squid:S2629"
        property "sonar.issue.ignore.multicriteria.j8.resourceKey", "**/*.java"
        // Disabling Spring Security's CSRF protection is security-sensitive (squid:S4502)
        property "sonar.issue.ignore.multicriteria.j9.ruleKey", "squid:S4502"
        property "sonar.issue.ignore.multicriteria.j9.resourceKey", "**/*.java"
        // Controlling permissions is security-sensitive (squid:S4834)
        property "sonar.issue.ignore.multicriteria.j10.ruleKey", "squid:S4834"
        property "sonar.issue.ignore.multicriteria.j10.resourceKey", "**/*.java"
        // "throws" declarations should not be superfluous (squid:RedundantThrowsDeclarationCheck)
        property "sonar.issue.ignore.multicriteria.j11.ruleKey", "squid:RedundantThrowsDeclarationCheck"
        property "sonar.issue.ignore.multicriteria.j11.resourceKey", "**/*.java"
        // "InterruptedException" should not be ignored (squid:S2142)
        property "sonar.issue.ignore.multicriteria.j12.ruleKey", "squid:S2142"
        property "sonar.issue.ignore.multicriteria.j12.resourceKey", "**/*.java"
        // Persistent entities should not be used as arguments of "@RequestMapping" methods (squid:S4684)
        property "sonar.issue.ignore.multicriteria.j13.ruleKey", "squid:S4684"
        property "sonar.issue.ignore.multicriteria.j13.resourceKey", "**/*.java"
        // Subclasses that add fields should override "equals" (squid:S2160)
        property "sonar.issue.ignore.multicriteria.j14.ruleKey", "squid:S2160"
        property "sonar.issue.ignore.multicriteria.j14.resourceKey", "**/*.java"
        // "@NonNull" values should not be set to null (squid:S2637)
        property "sonar.issue.ignore.multicriteria.j15.ruleKey", "squid:S2637"
        property "sonar.issue.ignore.multicriteria.j15.resourceKey", "**/*.java"
        // Tests should not be ignored (squid:S1607)
        property "sonar.issue.ignore.multicriteria.j16.ruleKey", "squid:S1607"
        property "sonar.issue.ignore.multicriteria.j16.resourceKey", "**/*.java"
        //URIs should not be hardcoded
        property "sonar.issue.ignore.multicriteria.j17.ruleKey", "squid:S1075"
        property "sonar.issue.ignore.multicriteria.j17.resourceKey", "**/*.java"
        // "static" base class members should not be accessed via derived types
        property "sonar.issue.ignore.multicriteria.j18.ruleKey", "squid:S3252"
        property "sonar.issue.ignore.multicriteria.j18.resourceKey", "**/*Specifications.java"
        //  variable fields should not have public accessibility
        property "sonar.issue.ignore.multicriteria.j19.ruleKey", "squid:ClassVariableVisibilityCheck"
        property "sonar.issue.ignore.multicriteria.j19.resourceKey", "**/resource/**/*.java"
        // Methods should not have too many parameters
        property "sonar.issue.ignore.multicriteria.j20.ruleKey", "squid:S00107"
        property "sonar.issue.ignore.multicriteria.j20.resourceKey", "**/*.java"
        // Source files should not have any duplicated blocks
        property "sonar.issue.ignore.multicriteria.j21.ruleKey", "common-java:DuplicatedBlocks"
        property "sonar.issue.ignore.multicriteria.j21.resourceKey", "**/*.java"
        // Exception for unconditional formatting in log statement
        property "sonar.issue.ignore.multicriteria.j22.ruleKey", "java:S2629"
        property "sonar.issue.ignore.multicriteria.j22.resourceKey", "**/ErrorController.java"
        // Declare this local variable with "var" instead
        property "sonar.issue.ignore.multicriteria.j23.ruleKey", "java:S6212"
        property "sonar.issue.ignore.multicriteria.j23.resourceKey", "**/*.java"

        // Kotlin
        // Cognitive Complexity of functions should not be too high (kotlin:S3776)
        property "sonar.issue.ignore.multicriteria.k1.ruleKey", "kotlin:S3776"
        property "sonar.issue.ignore.multicriteria.k1.resourceKey", "**/*.kt"
        // Track uses of "TO DO" tags (kotlin:S1135)
        property "sonar.issue.ignore.multicriteria.k2.ruleKey", "kotlin:S1135"
        property "sonar.issue.ignore.multicriteria.k2.resourceKey", "**/*.kt"
        // Functions should not have identical implementations (kotlin:S4144)
        property "sonar.issue.ignore.multicriteria.k3.ruleKey", "kotlin:S4144"
        property "sonar.issue.ignore.multicriteria.k3.resourceKey", "**/*.kt"
        //  This function has XX parameters, which is greater than the 7 authorized (kotlin:S107).
        property "sonar.issue.ignore.multicriteria.k4.ruleKey", "kotlin:S107"
        property "sonar.issue.ignore.multicriteria.k4.resourceKey", "**/*.kt"

        // If the pull request was manually triggered the BuildReason is "Manual", else "PullRequest".
        // Whether the BuildReason is "PullRequest" or "Manual" we assume that a pull request has a SourceBranchName "merge".
        if ("merge" != sourceBranch) {
            property "sonar.branch.name", sourceBranch
        }
    }
}

// Workaround for now to get the spring boot tests running with gradle
sourceSets {
    main.java.srcDirs += "src/main/kotlin/"
    test.java.srcDirs += "src/test/kotlin/"
}

springBoot {
    buildInfo()
}

test {
    systemProperty "user.timezone", "UTC"
    doFirst { jvmArgs = ['-Xshare:off', '--add-opens', 'java.base/java.time=ALL-UNNAMED'] }
    finalizedBy jacocoTestReport
    jvmArgs "-XX:-OmitStackTraceInFastThrow"
    maxHeapSize = "2560m"
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    outputs.dir snippetsDir
    useJUnitPlatform()
}

def isLocal = !project.hasProperty("BuildReason") || BuildReason.isEmpty()
def isMergeBranch = project.hasProperty("SourceBranchName") && !SourceBranchName.isEmpty() && "merge" == SourceBranchName
def isIntegrationBranch = project.hasProperty("SourceBranchName") && !SourceBranchName.isEmpty() && "integration" == SourceBranchName
if (isLocal || isMergeBranch || isIntegrationBranch) {
    check.dependsOn dependencyCheckAnalyze
}

static def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}
version='1.0.0'
group='com.bosch.pt'
