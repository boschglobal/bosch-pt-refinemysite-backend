package com.bosch.pt.iot.smartsite.common.i18n
// ---------------------------------
// WARNING: Generated by Gradle task - NOT TO BE EDITED
// ---------------------------------

object Key {

    /**
     * en
     */
    const val KEY = "Key"

    /**
     * Superintendent
     */
    const val EMPLOYEE_ROLE_ENUM_CSM = "EmployeeRoleEnum_Csm"

    /**
     * Foreman
     */
    const val EMPLOYEE_ROLE_ENUM_FM = "EmployeeRoleEnum_Fm"

    /**
     * Representative
     */
    const val EMPLOYEE_ROLE_ENUM_RP = "EmployeeRoleEnum_Rp"

    /**
     * New Building
     */
    const val PROJECT_CATEGORY_ENUM_NB = "ProjectCategoryEnum_NB"

    /**
     * Renovation
     */
    const val PROJECT_CATEGORY_ENUM_OB = "ProjectCategoryEnum_OB"

    /**
     * Reconstruction
     */
    const val PROJECT_CATEGORY_ENUM_RB = "ProjectCategoryEnum_RB"

    /**
     * Clarification needed
     */
    const val TASK_ACTION_ENUM_COMMONUNDERSTANDING = "TaskActionEnum_COMMON_UNDERSTANDING"

    /**
     * Equipment
     */
    const val TASK_ACTION_ENUM_EQUIPMENT = "TaskActionEnum_EQUIPMENT"

    /**
     * External factors
     */
    const val TASK_ACTION_ENUM_EXTERNALFACTORS = "TaskActionEnum_EXTERNAL_FACTORS"

    /**
     * Information
     */
    const val TASK_ACTION_ENUM_INFORMATION = "TaskActionEnum_INFORMATION"

    /**
     * Material
     */
    const val TASK_ACTION_ENUM_MATERIAL = "TaskActionEnum_MATERIAL"

    /**
     * Preliminary work
     */
    const val TASK_ACTION_ENUM_PRELIMINARYWORK = "TaskActionEnum_PRELIMINARY_WORK"

    /**
     * Labor
     */
    const val TASK_ACTION_ENUM_RESOURCES = "TaskActionEnum_RESOURCES"

    /**
     * Safety
     */
    const val TASK_ACTION_ENUM_SAFEWORKINGENVIRONMENT = "TaskActionEnum_SAFE_WORKING_ENVIRONMENT"

    /**
     * Clarification needed
     */
    const val TASK_CONSTRAINT_ENUM_COMMONUNDERSTANDING = "TaskConstraintEnum_COMMON_UNDERSTANDING"

    /**
     * Equipment
     */
    const val TASK_CONSTRAINT_ENUM_EQUIPMENT = "TaskConstraintEnum_EQUIPMENT"

    /**
     * External factors
     */
    const val TASK_CONSTRAINT_ENUM_EXTERNALFACTORS = "TaskConstraintEnum_EXTERNAL_FACTORS"

    /**
     * Information
     */
    const val TASK_CONSTRAINT_ENUM_INFORMATION = "TaskConstraintEnum_INFORMATION"

    /**
     * Material
     */
    const val TASK_CONSTRAINT_ENUM_MATERIAL = "TaskConstraintEnum_MATERIAL"

    /**
     * Preliminary work
     */
    const val TASK_CONSTRAINT_ENUM_PRELIMINARYWORK = "TaskConstraintEnum_PRELIMINARY_WORK"

    /**
     * Labor
     */
    const val TASK_CONSTRAINT_ENUM_RESOURCES = "TaskConstraintEnum_RESOURCES"

    /**
     * Safety
     */
    const val TASK_CONSTRAINT_ENUM_SAFEWORKINGENVIRONMENT = "TaskConstraintEnum_SAFE_WORKING_ENVIRONMENT"

    /**
     * Custom constraint 1
     */
    const val TASK_CONSTRAINT_ENUM_CUSTOM1 = "TaskConstraintEnum_CUSTOM1"

    /**
     * Custom constraint 2
     */
    const val TASK_CONSTRAINT_ENUM_CUSTOM2 = "TaskConstraintEnum_CUSTOM2"

    /**
     * Custom constraint 3
     */
    const val TASK_CONSTRAINT_ENUM_CUSTOM3 = "TaskConstraintEnum_CUSTOM3"

    /**
     * Custom constraint 4
     */
    const val TASK_CONSTRAINT_ENUM_CUSTOM4 = "TaskConstraintEnum_CUSTOM4"

    /**
     * Invalid file.
     */
    const val ATTACHMENT_VALIDATION_ERROR_IOERROR = "Attachment_ValidationError_IOError"

    /**
     * The attachment wasn't found.
     */
    const val ATTACHMENT_VALIDATION_ERROR_NOT_FOUND = "Attachment_ValidationError_NotFound"

    /**
     * Record can not be created because it already exists.
     */
    const val COMMON_VALIDATION_ERROR_ENTITY_DUPLICATED = "Common_ValidationError_EntityDuplicated"

    /**
     * Record can not be updated because the provided version is outdated.
     */
    const val COMMON_VALIDATION_ERROR_ENTITY_OUTDATED = "Common_ValidationError_EntityOutdated"

    /**
     * Change of record not possible as record was already updated or deleted by another user.
     */
    const val COMMON_VALIDATION_ERROR_OPTIMISTIC_LOCKING = "Common_ValidationError_OptimisticLocking"

    /**
     * Creation or modification of the record is not possible because specified data of record violates integrity constraints.
     */
    const val COMMON_VALIDATION_ERROR_DATA_INTEGRITY_VIOLATED = "Common_ValidationError_DataIntegrityViolated"

    /**
     * This action is not supported by the client version used.
     */
    const val COMMON_VALIDATION_ERROR_ACTION_NOT_SUPPORTED_BY_CLIENT_VERSION = "Common_ValidationError_ActionNotSupportedByClientVersion"

    /**
     * Admin cannot remove the admin permission itself.
     */
    const val COMMON_VALIDATION_ERROR_ADMIN_REMOVE_PERMISSION_ITSELF = "Common_ValidationError_AdminRemovePermissionItself"

    /**
     * The page size is too big.
     */
    const val COMMON_VALIDATION_ERROR_PAGE_SIZE_TOO_BIG = "Common_ValidationError_PageSizeTooBig"

    /**
     * The suggest term is too long.
     */
    const val COMMON_VALIDATION_ERROR_SUGGEST_TERM_TOO_LONG = "Common_ValidationError_SuggestTermTooLong"

    /**
     * Given identifier type is not supported
     */
    const val COMMON_VALIDATION_ERROR_IDENTIFIER_TYPE_NOT_SUPPORTED = "Common_ValidationError_IdentifierTypeNotSupported"

    /**
     * Project not found.
     */
    const val COMMON_VALIDATION_ERROR_PROJECT_NOT_FOUND = "Common_ValidationError_ProjectNotFound"

    /**
     * Either a street-, post box or both addresses are required.
     */
    const val COMPANY_VALIDATION_ERROR_MISSING_ADDRESS = "Company_ValidationError_MissingAddress"

    /**
     * The company was not found.
     */
    const val COMPANY_VALIDATION_ERROR_NOT_FOUND = "Company_ValidationError_NotFound"

    /**
     * The user was not found.
     */
    const val COMPANY_VALIDATION_ERROR_NOT_FOUND_USER = "Company_ValidationError_NotFoundUser"

    /**
     * The company can not be deleted due to existing employees.
     */
    const val COMPANY_VALIDATION_ERROR_EXIST_COMPANY_EMPLOYEE = "Company_ValidationError_ExistCompanyEmployee"

    /**
     * Contains no default translation.
     */
    const val CRAFT_VALIDATION_ERROR_NO_DEFAULT_NAME = "Craft_ValidationError_NoDefaultName"

    /**
     * Discipline is already in use.
     */
    const val PROJECT_CRAFT_VALIDATION_ERROR_USED_NAME = "ProjectCraft_ValidationError_UsedName"

    /**
     * Not able to delete. Discipline is already in use.
     */
    const val PROJECT_CRAFT_VALIDATION_ERROR_CRAFT_IN_USE = "ProjectCraft_ValidationError_CraftInUse"

    /**
     * Disciplines list not found.
     */
    const val PROJECT_CRAFT_LIST_VALIDATION_ERROR_NOT_FOUND = "ProjectCraftList_ValidationError_NotFound"

    /**
     * Invalid position value
     */
    const val PROJECT_CRAFT_LIST_VALIDATION_ERROR_INVALID_POSITION = "ProjectCraftList_ValidationError_InvalidPosition"

    /**
     * There is already an employee for the given user.
     */
    const val EMPLOYEE_VALIDATION_ERROR_EXIST_USER_EMPLOYEE = "Employee_ValidationError_ExistUserEmployee"

    /**
     * The employee was not found.
     */
    const val EMPLOYEE_VALIDATION_ERROR_NOT_FOUND = "Employee_ValidationError_NotFound"

    /**
     * This employee still has one or more linked participants.
     */
    const val EMPLOYEE_VALIDATION_ERROR_EXIST_PARTICIPANT = "Employee_ValidationError_ExistParticipant"

    /**
     * Invalid image.
     */
    const val IMAGE_VALIDATION_ERROR_INVALID_IMAGE = "Image_ValidationError_InvalidImage"

    /**
     * The specified image type is not supported.
     */
    const val IMAGE_VALIDATION_ERROR_UNSUPPORTED_IMAGE_TYPE = "Image_ValidationError_UnsupportedImageType"

    /**
     * The invitation cannot be found.
     */
    const val INVITATION_VALIDATION_ERROR_INVITATION_NOT_FOUND = "Invitation_ValidationError_InvitationNotFound"

    /**
     * Given discipline cannot be found.
     */
    const val MILESTONE_VALIDATION_ERROR_CRAFT_NOT_FOUND = "Milestone_ValidationError_CraftNotFound"

    /**
     * Discipline is missing.
     */
    const val MILESTONE_VALIDATION_ERROR_CRAFT_MISSING = "Milestone_ValidationError_CraftMissing"

    /**
     * The milestone was not found.
     */
    const val MILESTONE_VALIDATION_ERROR_NOT_FOUND = "Milestone_ValidationError_NotFound"

    /**
     * Given project cannot be found.
     */
    const val MILESTONE_VALIDATION_ERROR_PROJECT_NOT_FOUND = "Milestone_ValidationError_ProjectNotFound"

    /**
     * Working area not found.
     */
    const val MILESTONE_VALIDATION_ERROR_WORK_AREA_NOT_FOUND = "Milestone_ValidationError_WorkAreaNotFound"

    /**
     * Company representative is already assigned.
     */
    const val PROJECT_VALIDATION_ERROR_COMPANY_REPRESENTATIVE_ALREADY_ASSIGNED = "Project_ValidationError_CompanyRepresentativeAlreadyAssigned"

    /**
     * No eligible user found to assign.
     */
    const val PROJECT_VALIDATION_ERROR_CR_WANTS_TO_ASSIGN_USER_OF_OTHER_COMPANY = "Project_ValidationError_CrWantsToAssignUserOfOtherCompany"

    /**
     * No eligible user found to assign. Please check with your Bosch support if the user has already been assigned to a company.
     */
    const val PROJECT_VALIDATION_ERROR_EMPLOYEE_NOT_FOUND = "Project_ValidationError_EmployeeNotFound"

    /**
     * Project not found.
     */
    const val PROJECT_VALIDATION_ERROR_PROJECT_NOT_FOUND = "Project_ValidationError_ProjectNotFound"

    /**
     * The project picture could not be found.
     */
    const val PROJECT_VALIDATION_ERROR_PROJECT_PICTURE_NOT_FOUND = "Project_ValidationError_ProjectPictureNotFound"

    /**
     * The start date of project must not be after the end date.
     */
    const val PROJECT_VALIDATION_ERROR_START_DATE_AFTER_END_DATE = "Project_ValidationError_StartDateAfterEndDate"

    /**
     * User is already assigned.
     */
    const val PROJECT_VALIDATION_ERROR_USER_ALREADY_ASSIGNED = "Project_ValidationError_UserAlreadyAssigned"

    /**
     * An inactive project participant exists with a different identifier.
     */
    const val PROJECT_VALIDATION_ERROR_INACTIVE_PARTICIPANT_EXISTS_WITH_DIFFERENT_IDENTIFIER = "Project_ValidationError_InactiveParticipantExistsWithDifferentIdentifier"

    /**
     * Title of the project to be deleted does not match the given one.
     */
    const val PROJECT_DELETE_VALIDATION_ERROR_PROJECT_TITLE_INCORRECT = "Project_DeleteValidationError_ProjectTitleIncorrect"

    /**
     * The project craft could not be found.
     */
    const val PROJECT_CRAFT_VALIDATION_ERROR_PROJECT_CRAFT_NOT_FOUND = "Project_Craft_ValidationError_ProjectCraftNotFound"

    /**
     * The project participant could not be found.
     */
    const val PARTICIPANT_VALIDATION_ERROR_PARTICIPANT_NOT_FOUND = "Participant_ValidationError_ParticipantNotFound"

    /**
     * At least one superintended must remain on the project.
     */
    const val PARTICIPANT_VALIDATION_ERROR_PARTICIPANT_CSM_NOT_REMOVABLE = "Participant_ValidationError_ParticipantCsmNotRemovable"

    /**
     * Not able to remove your own participant from this project.
     */
    const val PARTICIPANT_VALIDATION_ERROR_OWN_PARTICIPANT_NOT_REMOVABLE = "Participant_ValidationError_OwnParticipantNotRemovable"

    /**
     * Not able to update your own participant on this project.
     */
    const val PARTICIPANT_VALIDATION_ERROR_OWN_PARTICIPANT_NOT_CHANGEABLE = "Participant_ValidationError_OwnParticipantNotChangeable"

    /**
     * Inactive participants cannot be updated.
     */
    const val PARTICIPANT_VALIDATION_ERROR_INACTIVE_PARTICIPANT_NOT_CHANGEABLE = "Participant_ValidationError_InactiveParticipantNotChangeable"

    /**
     * Participant can accept invitation only in status INVITED.
     */
    const val PARTICIPANT_VALIDATION_ERROR_ACCEPT_INVITATION_ONLY_IN_STATUS_INVITED = "Participant_ValidationError_AcceptInvitationOnlyInStatusInvited"

    /**
     * Participant can only be activated in status VALIDATION.
     */
    const val PARTICIPANT_VALIDATION_ERROR_ACTIVATE_ONLY_IN_STATUS_VALIDATION = "Participant_ValidationError_ActivateOnlyInStatusValidation"

    /**
     * Participant can only be cancelled in status INVITED or VALIDATION.
     */
    const val PARTICIPANT_VALIDATION_ERROR_CANCEL_ONLY_IN_STATUS_INVITED_OR_VALIDATION = "Participant_ValidationError_CancelOnlyInStatusInvitedOrValidation"

    /**
     * Participant can only be deactivated in status ACTIVE.
     */
    const val PARTICIPANT_VALIDATION_ERROR_DEACTIVATE_ONLY_IN_STATUS_ACTIVE = "Participant_ValidationError_DeactivateOnlyInStatusActive"

    /**
     * Given topic cannot be found.
     */
    const val TOPIC_VALIDATION_ERROR_NOT_FOUND = "Topic_ValidationError_NotFound"

    /**
     * The task to which the topic belongs cannot be found.
     */
    const val TOPIC_VALIDATION_ERROR_TASK_NOT_FOUND = "Topic_ValidationError_TaskNotFound"

    /**
     * Given comment cannot be found.
     */
    const val MESSAGE_VALIDATION_ERROR_NOT_FOUND = "Message_ValidationError_NotFound"

    /**
     * The topic the comment belongs to cannot be found.
     */
    const val MESSAGE_VALIDATION_ERROR_TOPIC_NOT_FOUND = "Message_ValidationError_TopicNotFound"

    /**
     * Closed or accepted tasks cannot be assigned.
     */
    const val TASK_VALIDATION_ERROR_CLOSED_OR_ACCEPTED_TASK_ASSIGNMENT_FORBIDDEN = "Task_ValidationError_ClosedOrAcceptedTaskAssignmentForbidden"

    /**
     * Closed or accepted tasks cannot be modified.
     */
    const val TASK_VALIDATION_ERROR_CLOSED_OR_ACCEPTED_TASK_UPDATE_FORBIDDEN = "Task_ValidationError_ClosedOrAcceptedTaskUpdateForbidden"

    /**
     * Closed or accepted tasks cannot be closed.
     */
    const val TASK_VALIDATION_ERROR_CLOSED_OR_ACCEPTED_TASK_CLOSE_FORBIDDEN = "Task_ValidationError_ClosedOrAcceptedTaskCloseForbidden"

    /**
     * Accepted tasks cannot be accepted.
     */
    const val TASK_VALIDATION_ERROR_ACCEPTED_TASK_ACCEPT_FORBIDDEN = "Task_ValidationError_AcceptedTaskAcceptForbidden"

    /**
     * Draft or open tasks cannot be reset.
     */
    const val TASK_VALIDATION_ERROR_DRAFT_OR_OPEN_TASK_RESET_FORBIDDEN = "Task_ValidationError_DraftOrOpenTaskResetForbidden"

    /**
     * Given company cannot be found.
     */
    const val TASK_VALIDATION_ERROR_COMPANY_NOT_FOUND = "Task_ValidationError_CompanyNotFound"

    /**
     * Given discipline cannot be found.
     */
    const val TASK_VALIDATION_ERROR_CRAFT_NOT_FOUND = "Task_ValidationError_CraftNotFound"

    /**
     * Working area not found
     */
    const val TASK_VALIDATION_ERROR_WORK_AREA_NOT_FOUND = "Task_ValidationError_WorkAreaNotFound"

    /**
     * Task can only be created as draft or if company is assigned.
     */
    const val TASK_VALIDATION_ERROR_CREATION_POSSIBLE_WHEN_STATUS_DRAFT_OR_COMPANY_ASSIGNED = "Task_ValidationError_CreationPossibleWhenStatusDraftOrCompanyAssigned"

    /**
     * Given user cannot be found or is not available for the specified usage.
     */
    const val TASK_VALIDATION_ERROR_EMPLOYEE_NOT_FOUND = "Task_ValidationError_EmployeeNotFound"

    /**
     * Invalid task filter specified.
     */
    const val TASK_VALIDATION_ERROR_INVALID_FILTER = "Task_ValidationError_InvalidFilter"

    /**
     * Given task cannot be found.
     */
    const val TASK_VALIDATION_ERROR_NOT_FOUND = "Task_ValidationError_NotFound"

    /**
     * Tasks do not belong to the same project.
     */
    const val TASK_VALIDATION_ERROR_NOT_OF_SAME_PROJECT = "Task_ValidationError_NotOfSameProject"

    /**
     * Task can only be sent if task is in status draft.
     */
    const val TASK_VALIDATION_ERROR_OPEN_POSSIBLE_WHEN_STATUS_DRAFT = "Task_ValidationError_OpenPossibleWhenStatusDraft"

    /**
     * Given project cannot be found.
     */
    const val TASK_VALIDATION_ERROR_PROJECT_NOT_FOUND = "Task_ValidationError_ProjectNotFound"

    /**
     * Given project participant cannot be found.
     */
    const val TASK_VALIDATION_ERROR_PARTICIPANT_NOT_FOUND = "Task_ValidationError_ParticipantNotFound"

    /**
     * Given project participant does not belong to same project as the task.
     */
    const val TASK_VALIDATION_ERROR_PARTICIPANT_DOES_NOT_BELONG_TO_PROJECT = "Task_ValidationError_ParticipantDoesNotBelongToProject"

    /**
     * The start date of task must not be after the end date.
     */
    const val TASK_VALIDATION_ERROR_START_DATE_AFTER_END_DATE = "Task_ValidationError_StartDateAfterEndDate"

    /**
     * A task can only be started if the task is draft or open.
     */
    const val TASK_VALIDATION_ERROR_START_ONLY_POSSIBLE_WHEN_STATUS_IS_DRAFT_OR_OPEN = "Task_ValidationError_StartOnlyPossibleWhenStatusIsDraftOrOpen"

    /**
     * Given selection of task actions cannot be found.
     */
    const val TASK_VALIDATION_ERROR_ACTION_SELECTION_NOT_FOUND = "Task_ValidationError_ActionSelectionNotFound"

    /**
     * A task can only be unassigned if the task is not closed or accepted.
     */
    const val TASK_VALIDATION_ERROR_UNASSIGN_POSSIBLE_WHEN_STATUS_IS_NOT_CLOSED_OR_ACCEPTED = "Task_ValidationError_UnassignPossibleWhenStatusIsNotClosedOrAccepted"

    /**
     * A task that has day cards with a status different than âopenâ cannot be deleted.
     */
    const val TASK_VALIDATION_ERROR_TASK_WITH_NON_OPEN_DAY_CARDS_CANNOT_BE_DELETED = "Task_ValidationError_TaskWithNonOpenDayCardsCannotBeDeleted"

    /**
     * [Deleted User]
     */
    const val USER_DELETED = "User_Deleted"

    /**
     * User cannot be deleted.
     */
    const val USER_VALIDATION_ERROR_DELETION_NOT_POSSIBLE = "User_ValidationError_DeletionNotPossible"

    /**
     * Given user cannot be found.
     */
    const val USER_VALIDATION_ERROR_NOT_FOUND = "User_ValidationError_NotFound"

    /**
     * The requested profile picture could not be found.
     */
    const val USER_VALIDATION_ERROR_PROFILE_PICTURE_NOT_FOUND = "User_ValidationError_ProfilePicture_NotFound"

    /**
     * First name, last name and gender must be given.
     */
    const val USER_VALIDATION_ERROR_REGISTRATION_DATA_INVALID = "User_ValidationError_RegistrationDataInvalid"

    /**
     * Some of the selected disciplines were not found.
     */
    const val USER_VALIDATION_ERROR_ASSOCIATED_CRAFT_NOT_FOUND = "User_ValidationError_AssociatedCraftNotFound"

    /**
     * Working area not found
     */
    const val WORK_AREA_VALIDATION_ERROR_NOT_FOUND = "WorkArea_ValidationError_NotFound"

    /**
     * Not able to delete working area. Working area still in use
     */
    const val WORK_AREA_VALIDATION_ERROR_WORK_AREA_IN_USE = "WorkArea_ValidationError_WorkAreaInUse"

    /**
     * Not able to delete working area. Work area is used as parent in structure of an imported project.
     */
    const val WORK_AREA_VALIDATION_ERROR_WORK_AREA_IS_PARENT = "WorkArea_ValidationError_WorkAreaIsParent"

    /**
     * Working area list not found
     */
    const val WORK_AREA_LIST_VALIDATION_ERROR_NOT_FOUND = "WorkAreaList_ValidationError_NotFound"

    /**
     * Invalid position value
     */
    const val WORK_AREA_VALIDATION_ERROR_INVALID_POSITION = "WorkArea_ValidationError_InvalidPosition"

    /**
     * Working area is already in use
     */
    const val WORK_AREA_VALIDATION_ERROR_USED_NAME = "WorkArea_ValidationError_UsedName"

    /**
     * Duplicated working area data.
     */
    const val WORK_AREA_VALIDATION_ERROR_DATA = "WorkArea_ValidationError_Data"

    /**
     * The referenced task schedule was not found.
     */
    const val TASK_SCHEDULE_VALIDATION_ERROR_NOT_FOUND = "TaskSchedule_ValidationError_NotFound"

    /**
     * Task is outdated. Refresh and update the task.
     */
    const val TASK_SCHEDULE_VALIDATION_ERROR_ALREADY_EXISTS = "TaskSchedule_ValidationError_AlreadyExists"

    /**
     * The task start and/or due date is missing.
     */
    const val TASK_SCHEDULE_VALIDATION_ERROR_DATE_TIMES = "TaskSchedule_ValidationError_DateTimes"

    /**
     * The task schedule can not be deleted. It still contains day cards.
     */
    const val TASK_SCHEDULE_VALIDATION_ERROR_DELETE_NOT_POSSIBLE_DUE_TO_EXISTING_DAY_CARDS = "TaskSchedule_ValidationError_DeleteNotPossibleDueToExistingDayCards"

    /**
     * The schedule either misses existing day cards or contains non-existing day cards.
     */
    const val TASK_SCHEDULE_VALIDATION_ERROR_EXISTING_SLOTS_NOT_MATCH = "TaskSchedule_ValidationError_ExistingSlotsNotMatch"

    /**
     * An existing day card is not present in the new task schedule.
     */
    const val TASK_SCHEDULE_VALIDATION_ERROR_EXISTING_DAY_CARD_NOT_FOUND = "TaskSchedule_ValidationError_ExistingDayCardNotFound"

    /**
     * One of the day cards has a position out of the schedule's date range.
     */
    const val TASK_SCHEDULE_VALIDATION_ERROR_POSITION_OUT_OF_RANGE = "TaskSchedule_ValidationError_PositionOutOfRange"

    /**
     * The task schedule contains day cards with the same position / date.
     */
    const val TASK_SCHEDULE_VALIDATION_ERROR_MULTIPLE_DAY_CARD_AT_SAME_POSITION = "TaskSchedule_ValidationError_MultipleDayCardAtSamePosition"

    /**
     * The date for the day card is not valid. The related schedule has already a day card for this date assigned.
     */
    const val DAY_CARD_VALIDATION_ERROR_DATE_ALREADY_TAKEN = "DayCard_ValidationError_DateAlreadyTaken"

    /**
     * The date for the day card is not valid. It must be between the start and end date of the task schedule.
     */
    const val DAY_CARD_VALIDATION_ERROR_DATE_TIMES = "DayCard_ValidationError_DateTimes"

    /**
     * The date for the day card is not valid. It must be set to a valid working day.
     */
    const val DAY_CARD_VALIDATION_ERROR_DATE = "DayCard_ValidationError_Date"

    /**
     * Day card not found.
     */
    const val DAY_CARD_VALIDATION_ERROR_NOT_FOUND = "DayCard_ValidationError_NotFound"

    /**
     * Day cards do not belong to the same task.
     */
    const val DAY_CARD_VALIDATION_ERROR_NOT_OF_SAME_TASK = "DayCard_ValidationError_NotOfSameTask"

    /**
     * This action is only allowed while day card status is open.
     */
    const val DAY_CARD_VALIDATION_ERROR_NOT_OPEN = "DayCard_ValidationError_NotOpen"

    /**
     * This action is only allowed while day card status is open or done.
     */
    const val DAY_CARD_VALIDATION_ERROR_NOT_OPEN_OR_DONE = "DayCard_ValidationError_NotOpenOrDone"

    /**
     * This action is only allowed while day card status is not open.
     */
    const val DAY_CARD_VALIDATION_ERROR_OPEN = "DayCard_ValidationError_Open"

    /**
     * We were not able to update the day card. Please try again later.
     */
    const val DAY_CARD_VALIDATION_ERROR_UPDATE_NOT_POSSIBLE = "DayCard_ValidationError_UpdateNotPossible"

    /**
     * Weeks
     */
    const val CALENDAR_WEEK_HEADER = "Calendar_Week_Header"

    /**
     * d LLL.
     */
    const val CALENDAR_WEEK_HEADER_PATTERN = "Calendar_Week_Header_Pattern"

    /**
     * EEE. d LLL.
     */
    const val CALENDAR_WEEK_DAY_HEADER_PATTERN = "Calendar_Week_Day_Header_Pattern"

    /**
     * d
     */
    const val CALENDAR_WEEK_DAY_MILESTONE_HEADER_PATTERN = "Calendar_Week_Day_Milestone_Header_Pattern"

    /**
     * Week
     */
    const val CALENDAR_WEEK_NAME = "Calendar_Week_Name"

    /**
     * Global milestones
     */
    const val CALENDAR_MILESTONE_HEADER = "Calendar_Milestone_Header"

    /**
     * Client
     */
    const val CALENDAR_MILESTONE_TYPE_ENUM_INVESTOR = "Calendar_MilestoneTypeEnum_Investor"

    /**
     * Project
     */
    const val CALENDAR_MILESTONE_TYPE_ENUM_PROJECT = "Calendar_MilestoneTypeEnum_Project"

    /**
     * Without working area
     */
    const val CALENDAR_WITHOUT_WORKAREA_HEADER = "Calendar_Without_Workarea_Header"

    /**
     * Export date: {0,date,dd MMMM',' yyyy}
     */
    const val CALENDAR_EXPORT_DATE = "Calendar_Export_Date"

    /**
     * Filters applied
     */
    const val CALENDAR_HAS_FILTERS_APPLIED = "Calendar_Has_Filters_Applied"

    /**
     * Exported calendar without content
     */
    const val CALENDAR_EMPTY = "Calendar_Empty"

    /**
     * Weather
     */
    const val DAY_CARD_REASON_ENUM_BADWEATHER = "DayCardReasonEnum_BAD_WEATHER"

    /**
     * Client / Design change
     */
    const val DAY_CARD_REASON_ENUM_CHANGEDPRIORITY = "DayCardReasonEnum_CHANGED_PRIORITY"

    /**
     * Preliminary work not recognized
     */
    const val DAY_CARD_REASON_ENUM_CONCESSIONNOTRECOGNIZED = "DayCardReasonEnum_CONCESSION_NOT_RECOGNIZED"

    /**
     * Custom reason 1
     */
    const val DAY_CARD_REASON_ENUM_CUSTOM1 = "DayCardReasonEnum_CUSTOM1"

    /**
     * Custom reason 2
     */
    const val DAY_CARD_REASON_ENUM_CUSTOM2 = "DayCardReasonEnum_CUSTOM2"

    /**
     * Custom reason 3
     */
    const val DAY_CARD_REASON_ENUM_CUSTOM3 = "DayCardReasonEnum_CUSTOM3"

    /**
     * Custom reason 4
     */
    const val DAY_CARD_REASON_ENUM_CUSTOM4 = "DayCardReasonEnum_CUSTOM4"

    /**
     * Delayed / Defective materials
     */
    const val DAY_CARD_REASON_ENUM_DELAYEDMATERIAL = "DayCardReasonEnum_DELAYED_MATERIAL"

    /**
     * Worker shortage
     */
    const val DAY_CARD_REASON_ENUM_MANPOWERSHORTAGE = "DayCardReasonEnum_MANPOWER_SHORTAGE"

    /**
     * Missing / Incomplete information
     */
    const val DAY_CARD_REASON_ENUM_MISSINGINFOS = "DayCardReasonEnum_MISSING_INFOS"

    /**
     * Missing / Defective tools
     */
    const val DAY_CARD_REASON_ENUM_MISSINGTOOLS = "DayCardReasonEnum_MISSING_TOOLS"

    /**
     * Preliminary work not done
     */
    const val DAY_CARD_REASON_ENUM_NOCONCESSION = "DayCardReasonEnum_NO_CONCESSION"

    /**
     * Overestimation of own performance
     */
    const val DAY_CARD_REASON_ENUM_OVERESTIMATION = "DayCardReasonEnum_OVERESTIMATION"

    /**
     * Rework required
     */
    const val DAY_CARD_REASON_ENUM_TOUCHUP = "DayCardReasonEnum_TOUCHUP"

    /**
     * Accepted
     */
    const val DAY_CARD_STATUS_ENUM_APPROVED = "DayCardStatusEnum_APPROVED"

    /**
     * Done
     */
    const val DAY_CARD_STATUS_ENUM_DONE = "DayCardStatusEnum_DONE"

    /**
     * Not done
     */
    const val DAY_CARD_STATUS_ENUM_NOTDONE = "DayCardStatusEnum_NOTDONE"

    /**
     * Open
     */
    const val DAY_CARD_STATUS_ENUM_OPEN = "DayCardStatusEnum_OPEN"

    /**
     * Closed
     */
    const val TASK_STATUS_ENUM_CLOSED = "TaskStatusEnum_CLOSED"

    /**
     * Accepted
     */
    const val TASK_STATUS_ENUM_ACCEPTED = "TaskStatusEnum_ACCEPTED"

    /**
     * Draft
     */
    const val TASK_STATUS_ENUM_DRAFT = "TaskStatusEnum_DRAFT"

    /**
     * Open
     */
    const val TASK_STATUS_ENUM_OPEN = "TaskStatusEnum_OPEN"

    /**
     * Started
     */
    const val TASK_STATUS_ENUM_STARTED = "TaskStatusEnum_STARTED"

    /**
     * Maximum number of one hundred filters reached.
     */
    const val QUICK_FILTER_VALIDATION_ERROR_MAX_NUMBER_REACHED = "QuickFilter_ValidationError_MaxNumberReached"

    /**
     * The quick filter was not found.
     */
    const val QUICK_FILTER_VALIDATION_ERROR_NOT_FOUND = "QuickFilter_ValidationError_NotFound"

    /**
     * This action is not possible. At least 1 active reason for variance is required.
     */
    const val RFV_VALIDATION_ERROR_DEACTIVATION_NOT_POSSIBLE = "Rfv_ValidationError_DeactivationNotPossible"

    /**
     * The reason is deactivated.
     */
    const val RFV_VALIDATION_ERROR_REASON_DEACTIVATED = "Rfv_ValidationError_ReasonDeactivated"

    /**
     * This action is not possible. At least 1 active constraint is required.
     */
    const val TASK_CONSTRAINT_VALIDATION_ERROR_DEACTIVATION_NOT_POSSIBLE = "TaskConstraint_ValidationError_DeactivationNotPossible"

    /**
     * This action is not possible. A deactivated constraint is selected.
     */
    const val TASK_CONSTRAINT_VALIDATION_ERROR_REASON_DEACTIVATED = "TaskConstraint_ValidationError_ReasonDeactivated"

    /**
     * Task/milestone could not be found.
     */
    const val RELATION_VALIDATION_ERROR_ELEMENT_NOT_FOUND = "Relation_ValidationError_ElementNotFound"

    /**
     * The dependency could not be found.
     */
    const val RELATION_VALIDATION_ERROR_NOT_FOUND = "Relation_ValidationError_NotFound"

    /**
     * An import is currently in progress. Please wait until the import is completed.
     */
    const val IMPORT_IMPOSSIBLE_ALREADY_RUNNING = "Import_Impossible_AlreadyRunning"

    /**
     * Data cannot be imported into a project with existing data.
     */
    const val IMPORT_IMPOSSIBLE_EXISTING_DATA = "Import_Impossible_ExistingData"

    /**
     * Malicious file detected. File has been deleted and further processing stopped.
     */
    const val IMPORT_IMPOSSIBLE_MALICIOUS_FILE = "Import_Impossible_MaliciousFile"

    /**
     * Unsupported file type detected. Allowed file types are (.mpp, .xer and .xml).
     */
    const val IMPORT_IMPOSSIBLE_UNSUPPORTED_FILE_TYPE = "Import_Impossible_UnsupportedFileType"

    /**
     * The ActivityId exceeds the maximum allowed length of 255 characters.
     */
    const val IMPORT_VALIDATION_ACTIVITY_ID_TOO_LONG = "Import_Validation_ActivityIdTooLong"

    /**
     * Unknown discipline column name.
     */
    const val IMPORT_VALIDATION_CRAFT_COLUMN_NAME_UNKNOWN = "Import_Validation_CraftColumnNameUnknown"

    /**
     * Discipline name missing. A default value will be set.
     */
    const val IMPORT_VALIDATION_CRAFT_NAME_EMPTY_DEFAULT_SET = "Import_Validation_CraftNameEmptyDefaultSet"

    /**
     * Discipline name is too long and will be shortened.
     */
    const val IMPORT_VALIDATION_CRAFT_NAME_WILL_BE_SHORTENED = "Import_Validation_CraftNameWillBeShortened"

    /**
     * The maximum amount of â{0}â (recurring) non-working days was exceeded.
     */
    const val IMPORT_VALIDATION_HOLIDAYS_MAX_AMOUNT_EXCEEDED = "Import_Validation_HolidaysMaxAmountExceeded"

    /**
     * Milestone name missing. A default value will be set.
     */
    const val IMPORT_VALIDATION_MILESTONE_NAME_EMPTY_DEFAULT_SET = "Import_Validation_MilestoneNameEmptyDefaultSet"

    /**
     * Milestone name is too long and will be shortened.
     */
    const val IMPORT_VALIDATION_MILESTONE_NAME_WILL_BE_SHORTENED = "Import_Validation_MilestoneNameWillBeShortened"

    /**
     * Milestone notes are too long and will be shortened.
     */
    const val IMPORT_VALIDATION_MILESTONE_NOTES_WILL_BE_SHORTENED = "Import_Validation_MilestoneNotesWillBeShortened"

    /**
     * Milestone date missing.
     */
    const val IMPORT_VALIDATION_MILESTONE_NO_DATE = "Import_Validation_MilestoneNoDate"

    /**
     * Dependency between types other than task and milestone are not supported and will be skipped.
     */
    const val IMPORT_VALIDATION_RELATION_UNSUPPORTED = "Import_Validation_Relation_Unsupported"

    /**
     * Dependency type is not supported and will be skipped.
     */
    const val IMPORT_VALIDATION_RELATION_TYPE_UNSUPPORTED = "Import_Validation_RelationType_Unsupported"

    /**
     * Finish-to-Finish: â{0}â â â{1}â
     */
    const val IMPORT_VALIDATION_RELATION_TYPE_FF = "Import_Validation_RelationType_FF"

    /**
     * Start-to-Finish: â{0}â â â{1}â
     */
    const val IMPORT_VALIDATION_RELATION_TYPE_SF = "Import_Validation_RelationType_SF"

    /**
     * Start-to-Start: â{0}â â â{1}â
     */
    const val IMPORT_VALIDATION_RELATION_TYPE_SS = "Import_Validation_RelationType_SS"

    /**
     * There is more than one discipline assigned to a task. The first one is taken.
     */
    const val IMPORT_VALIDATION_TASK_CRAFT_ADDITIONAL_VALUES_NOT_CONSIDERED = "Import_Validation_TaskCraftAdditionalValuesNotConsidered"

    /**
     * Task name missing. A default value will be set.
     */
    const val IMPORT_VALIDATION_TASK_NAME_EMPTY_DEFAULT_SET = "Import_Validation_TaskNameEmptyDefaultSet"

    /**
     * Task name is too long and will be shortened.
     */
    const val IMPORT_VALIDATION_TASK_NAME_WILL_BE_SHORTENED = "Import_Validation_TaskNameWillBeShortened"

    /**
     * Task notes are too long and will be shortened.
     */
    const val IMPORT_VALIDATION_TASK_NOTES_WILL_BE_SHORTENED = "Import_Validation_TaskNotesWillBeShortened"

    /**
     * There is more than one working area assigned to a task. The first one is taken.
     */
    const val IMPORT_VALIDATION_TASK_WORKING_AREA_ADDITIONAL_VALUES_NOT_CONSIDERED = "Import_Validation_TaskWorkingAreaAdditionalValuesNotConsidered"

    /**
     * The task start and/or due date is missing or invalid
     */
    const val IMPORT_VALIDATION_TASK_SCHEDULE_INVALID_DATES = "Import_Validation_TaskScheduleInvalidDates"

    /**
     * The value in the WBS column exceeds the maximum allowed length of 255 characters.
     */
    const val IMPORT_VALIDATION_WBS_NAME_TOO_LONG = "Import_Validation_WbsNameTooLong"

    /**
     * Unknown working area column name.
     */
    const val IMPORT_VALIDATION_WORK_AREA_COLUMN_NAME_UNKNOWN = "Import_Validation_WorkAreaColumnNameUnknown"

    /**
     * Working area name missing. A default value will be set.
     */
    const val IMPORT_VALIDATION_WORK_AREA_NAME_EMPTY_DEFAULT_SET = "Import_Validation_WorkAreaNameEmptyDefaultSet"

    /**
     * Working area name is too long and will be shortened.
     */
    const val IMPORT_VALIDATION_WORK_AREA_NAME_WILL_BE_SHORTENED = "Import_Validation_WorkAreaNameWillBeShortened"

    /**
     * Tasks on a non-working day have been detected. The working day configuration in the project settings will be updated.
     */
    const val IMPORT_VALIDATION_WORKDAY_CONFIGURATION_HAS_WORK_ON_NON_WORKDAY = "Import_Validation_WorkdayConfigurationHasWorkOnNonWorkday"

    /**
     * The maximum amount of â{0}â working areas was exceeded.
     */
    const val IMPORT_VALIDATION_WORKING_AREAS_MAX_AMOUNT_EXCEEDED = "Import_Validation_WorkingAreasMaxAmountExceeded"

    /**
     * The value for the shift days is invalid.
     */
    const val RESCHEDULE_VALIDATION_ERROR_INVALID_SHIFT_DAYS = "Reschedule_ValidationError_InvalidShiftDays"

    /**
     * Data cannot be exported as the feature is deactivated.
     */
    const val EXPORT_IMPOSSIBLE_FEATURE_DEACTIVATED = "Export_Impossible_FeatureDeactivated"

    /**
     * File
     */
    const val FILE = "File"

    /**
     * It is not possible to update the working day configuration with duplicated holidays.
     */
    const val WORKDAY_CONFIGURATION_VALIDATION_ERROR_DUPLICATED_HOLIDAY = "WorkdayConfiguration_ValidationError_DuplicatedHoliday"

    /**
     * It is not possible to update the working day configuration with duplicated workdays.
     */
    const val WORKDAY_CONFIGURATION_VALIDATION_ERROR_DUPLICATED_WORKDAY = "WorkdayConfiguration_ValidationError_DuplicatedWorkday"

}
