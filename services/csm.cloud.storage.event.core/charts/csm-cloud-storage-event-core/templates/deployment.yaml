apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
    custom/kafkaClient: "true"
    custom/tier: backend
    tags.datadoghq.com/service: {{ .Chart.Name }}
    tags.datadoghq.com/version: {{ .Chart.Version }}
  annotations:
    ad.datadoghq.com/tags: '{"layer":"backend"}'
    custom/targetReplicas: "{{ .Values.replicas }}"
spec:
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      name: {{ .Chart.Name }}
      labels:
        app: {{ .Chart.Name }}
        kafkaClient: "true"
        tags.datadoghq.com/service: {{ .Chart.Name }}
        tags.datadoghq.com/version: {{ .Chart.Version }}
      annotations:
        ad.datadoghq.com/tags: '{"layer":"backend"}'
        ad.datadoghq.com/{{ .Chart.Name }}.logs: '[{"source":"csm-backend-spring-boot"}]'
    spec:
      serviceAccountName: {{ .Chart.Name }}
      securityContext:
        runAsNonRoot: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: topology.kubernetes.io/zone
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Chart.Name }}
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Chart.Name }}
      containers:
      - name: {{ .Chart.Name }}
        image: ptcsmacr.azurecr.io/com.bosch.pt/csm.cloud.storage.event.core:{{ .Chart.Version }}
        imagePullPolicy: Always
        resources:
          requests:
            memory: "30Mi"
          limits:
            memory: "80Mi"
        ports:
        - containerPort: 8080
          name: server
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
        volumeMounts:
          - name: kv-volume-env
            mountPath: /kvmnt/env
            readOnly: true
        env:
        - name: KV_VOLUME_ENV_PATH
          value: "/kvmnt/env"
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_SERVICE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/service']
        - name: DD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/version']
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: DD_TRACE_SAMPLE_RATE
          value: "1"
        - name: DD_PROFILING_ENABLED
          value: "false"
        - name: DD_TRACE_PROPAGATION_STYLE_EXTRACT
          value: "datadog"
        - name: DD_TRACE_PROPAGATION_STYLE_INJECT
          value: "datadog"
        - name: DD_ENTITY_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: DD_TAGS
          value: "dd.internal.entity_id:$(DD_ENTITY_ID)"
          # End of tags for the workaround
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: STAGE
          value: {{ quote .Values.stage }}
        - name: GO_PROFILES_ACTIVE
          value: {{ quote .Values.profiles }}
        - name: SERVICE_LOG_LEVEL
          value: {{ quote .Values.logLevel }}
        startupProbe:
          httpGet:
            path: /health/liveness
            port: server
          # calculate failureThreshold by dividing max startup Time by periodSeconds
          failureThreshold: {{ div .Values.maxStartUpTime 5 }}
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: server
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: server
          initialDelaySeconds: 5
          failureThreshold: 1
          periodSeconds: 5
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      restartPolicy: Always
      volumes:
      - name: kv-volume-env
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "{{ .Chart.Name }}-env-aks-kv"
          nodePublishSecretRef:
            name: kvcreds
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
