/*
 * ************************************************************************
 *
 *  Copyright:       Robert Bosch Power Tools GmbH, 2018 - 2022
 *
 * ************************************************************************
 */


import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.InventoryHtmlReportRenderer

buildscript {
    ext {
        csmCloudUserAvroVersion = "11.0.0"
        csmDevOauthUtilitiesVersion = "6.0.0"
        detektVersion = "${externalCatalog.versions.detekt.get()}"
        kotlinVersion = "${externalCatalog.versions.kotlin.get()}"
        mavenAzureArtifact = {
            credentials {
                username "AZURE_ARTIFACTS"
                password System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") ?: "$azureArtifactsGradleAccessToken"
            }
            url "https://pkgs.dev.azure.com/pt-iot/_packaging/Artifacts/maven/v1"
        }
        springBootVersion = "${externalCatalog.versions.springBoot.get()}"
        springCloudVersion = "${externalCatalog.versions.springCloud.get()}"
    }
}

plugins {
    id "java"
    id "maven-publish"

    alias(externalCatalog.plugins.dependencyLicenseReport)
    alias(externalCatalog.plugins.detekt)
    alias(externalCatalog.plugins.docker)
    alias(externalCatalog.plugins.gitProperties)
    alias(externalCatalog.plugins.kotlinJvm)
    alias(externalCatalog.plugins.kotlinKapt)
    alias(externalCatalog.plugins.kotlinPluginAllOpen)
    alias(externalCatalog.plugins.kotlinPluginSpring)
    alias(externalCatalog.plugins.owaspDependencyCheck)
    alias(externalCatalog.plugins.sonarqube)
    alias(externalCatalog.plugins.springBoot)
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
java.toolchain.languageVersion.set(JavaLanguageVersion.of(21))

// Configurations in alphabetical order

bootJar {
    archiveBaseName = project.name
}

bootRun {
    systemProperties = System.properties
}

dependencies {
    implementation platform("com.bosch.pt:csm.cloud.dependency.bom-external:${gradle.externalBomVersion}")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")

    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion")

    implementation("com.bosch.pt:csm.cloud.user.avro:$csmCloudUserAvroVersion")
    implementation("com.bosch.pt:csm.dev.oauth-utilities:$csmDevOauthUtilitiesVersion")

    implementation("com.azure:azure-storage-blob")
    implementation("com.datadoghq:dd-trace-api")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.retrofit2:converter-jackson")
    implementation("com.squareup.retrofit2:retrofit")

    implementation("io.confluent:kafka-avro-serializer")
    implementation("io.confluent:kafka-schema-registry-client")
    implementation("io.micrometer:micrometer-core")
    implementation("io.micrometer:micrometer-registry-statsd")

    implementation("org.apache.kafka:kafka-clients")
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.mariadb.jdbc:mariadb-java-client")
    implementation("org.mongodb:mongodb-driver-core")
    implementation("org.mongodb:mongodb-driver-sync")
    implementation("org.postgresql:postgresql")

    kapt("org.springframework.boot:spring-boot-configuration-processor:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    implementation("org.springframework.boot:spring-boot-starter-hateoas")
    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")
    implementation("org.springframework.cloud:spring-cloud-starter-kubernetes-client-config")
    implementation("org.springframework.kafka:spring-kafka")

    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

dependencyCheck {
    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nuspecEnabled = false
    }
    failBuildOnCVSS = 11
    formats = ["HTML", "XML"]
    // A list of configurations to exclude
    // configurations.each { println it.name }
    skipConfigurations = [
            "asciidoctor",
            "checkstyle",
            "compileOnly",
            "compileClasspath",
            "detekt",
            "detektPlugins",
            "developmentOnly",
            "docker",
            "jacocoAgent",
            "jacocoAnt",
            "kaptTest",
            "spotbugs",
            "spotbugsPlugins",
            "spotbugsSlf4j",
            "testAnnotationProcessor",
            "testApi",
            "testApiDependenciesMetadata",
            "testCompile",
            "testCompileClasspath",
            "testCompileOnly",
            "testCompileOnlyDependenciesMetadata",
            "testImplementation",
            "testImplementationDependenciesMetadata",
            "testKotlinScriptDef",
            "testKotlinScriptDefExtensions",
            "testRuntime",
            "testRuntimeClasspath",
            "testRuntimeOnly",
            "testRuntimeOnlyDependenciesMetadata"
    ]
}

detekt {
    buildUponDefaultConfig = true
    config = files("config/detekt-config.yml")
    input = files("src/main/kotlin", "src/test/kotlin")
}

dockerPrepare {
    dependsOn bootJar
}

docker {
    buildArgs(["JAR_FILE": "${bootJar.archiveFileName.get()}"])
    dependsOn build
    files bootJar.archiveFile.get()
    name "ptcsmacr.azurecr.io/com.bosch.pt/csm.cloud.reset:$version"
}

jar {
    // Disable plain jar creation
    enabled = false
}

licenseReport {
    excludeGroups = ["com.bosch.pt"]
    filters = [new LicenseBundleNormalizer()]
    renderers = [new InventoryHtmlReportRenderer()]
}

publishing {
    publications {
        jar(MavenPublication) {
            artifact bootJar
            artifactId = "csm.cloud.reset"
            from components.java
            groupId = "com.bosch.pt"
        }
    }
    repositories {
        maven mavenAzureArtifact
    }
}

repositories {
    mavenCentral()
    maven { url "https://packages.confluent.io/maven/" }
    maven mavenAzureArtifact
}

// Workaround for now to get the spring boot tests running with gradle
sourceSets {
    main.java.srcDirs += "src/main/kotlin/"
    test.java.srcDirs += "src/test/kotlin/"
}

springBoot {
    buildInfo()
}

def isLocal = !project.hasProperty("BuildReason") || BuildReason.isEmpty()

test {
    doFirst { jvmArgs = ['-Xshare:off'] }
    if (isLocal)
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    useJUnitPlatform()
}

def isMergeBranch = project.hasProperty("SourceBranchName") && !SourceBranchName.isEmpty() && "merge" == SourceBranchName
def isIntegrationBranch = project.hasProperty("SourceBranchName") && !SourceBranchName.isEmpty() && "integration" == SourceBranchName
if (isLocal || isMergeBranch || isIntegrationBranch) {
    check.dependsOn dependencyCheckAnalyze
}
version='1.0.0'
group='com.bosch.pt'
