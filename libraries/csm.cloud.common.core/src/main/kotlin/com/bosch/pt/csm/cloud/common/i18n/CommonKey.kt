package com.bosch.pt.csm.cloud.common.i18n
// ---------------------------------
// WARNING: Generated by Gradle task - NOT TO BE EDITED
// ---------------------------------

object CommonKey {

    /**
     * en
     */
    const val KEY = "Key"

    /**
     * Due to maintenance work, access is currently not possible.
     */
    const val BLOCK_ALL_OPERATIONS = "Block_All_Operations"

    /**
     * Due to maintenance work, changes to the data are not possible at the moment.
     */
    const val BLOCK_WRITING_OPERATIONS = "Block_Writing_Operations"

    /**
     * Access denied.
     */
    const val SERVER_ERROR_ACCESS_DENIED = "ServerError_AccessDenied"

    /**
     * API version not supported. Supported versions are %s to %s.
     */
    const val SERVER_ERROR_API_VERSION_NOT_SUPPORTED = "ServerError_ApiVersionNotSupported"

    /**
     * An invalid request was sent to the server.
     */
    const val SERVER_ERROR_BAD_REQUEST = "ServerError_BadRequest"

    /**
     * An error occurred.
     */
    const val SERVER_ERROR_INTERNAL_SERVER_ERROR = "ServerError_InternalServerError"

    /**
     * The authentication token is invalid.
     */
    const val SERVER_ERROR_INVALID_TOKEN = "ServerError_InvalidToken"

    /**
     * Method not supported.
     */
    const val SERVER_ERROR_METHOD_NOT_SUPPORTED = "ServerError_MethodNotSupported"

    /**
     * No authentication token provided with the request.
     */
    const val SERVER_ERROR_NO_TOKEN_PROVIDED = "ServerError_NoTokenProvided"

    /**
     * Processing of request failed.
     */
    const val SERVER_ERROR_REQUEST_PROCESSING_FAILED = "ServerError_RequestProcessingFailed"

    /**
     * The server is currently unavailable.
     */
    const val SERVER_ERROR_SERVICE_NOT_AVAILABLE = "ServerError_ServiceNotAvailable"

    /**
     * Data have an unsupported media type.
     */
    const val SERVER_ERROR_UNSUPPORTED_MEDIA_TYPE = "ServerError_UnsupportedMediaType"

    /**
     * The user is already registered.
     */
    const val SERVER_ERROR_USER_ALREADY_REGISTERED = "ServerError_UserAlreadyRegistered"

    /**
     * The user is locked.
     */
    const val SERVER_ERROR_USER_LOCKED = "ServerError_UserLocked"

    /**
     * The user is not registered yet.
     */
    const val SERVER_ERROR_USER_NOT_REGISTERED = "ServerError_UserNotRegistered"

    /**
     * None of the received accept headers is supported
     */
    const val SERVER_ERROR_NOT_ACCEPTABLE = "ServerError_NotAcceptable"

}
