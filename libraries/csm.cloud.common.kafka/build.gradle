/*
 * ************************************************************************
 *
 *  Copyright:       Robert Bosch Power Tools GmbH, 2018 - 2023
 *
 * ************************************************************************
 */

import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.InventoryHtmlReportRenderer

buildscript {
    ext {
        csmCloudCommonAvroVersion = "10.0.0"
        detektVersion = "${externalCatalog.versions.detekt.get()}"
        kotlinVersion = "${externalCatalog.versions.kotlin.get()}"
        mavenAzureArtifact = {
            credentials {
                username "AZURE_ARTIFACTS"
                password System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") ?: "$azureArtifactsGradleAccessToken"
            }
            url "https://pkgs.dev.azure.com/pt-iot/_packaging/Artifacts/maven/v1"
        }
        springBootVersion = "${externalCatalog.versions.springBoot.get()}"
    }
}

plugins {
    id "java-library"
    id "maven-publish"

    alias(externalCatalog.plugins.dependencyLicenseReport)
    alias(externalCatalog.plugins.detekt)
    alias(externalCatalog.plugins.kotlinJvm)
    alias(externalCatalog.plugins.kotlinPluginSpring)
    alias(externalCatalog.plugins.release)
    alias(externalCatalog.plugins.sonarqube)
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
java.toolchain.languageVersion.set(JavaLanguageVersion.of(21))

//Read version number from version.txt
String versionFromFile = file("version.txt").text.trim()
String versionNumber = versionFromFile.substring(versionFromFile.indexOf("=") + 1)
//If version number is specified by -Pversion=... take it, otherwise take number from file
version = "unspecified".equals(version) ? versionNumber : version

// Task registrations and definitions

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    dependsOn testClasses
    from sourceSets.main.allSource + sourceSets.test.allSource
}

// Configurations in alphabetical order

artifacts {
    archives sourcesJar
}

dependencies {
    implementation platform("com.bosch.pt:csm.cloud.dependency.bom-external:${gradle.externalBomVersion}")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")

    api("com.bosch.pt:csm.cloud.common.avro:$csmCloudCommonAvroVersion")

    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion")

    implementation("org.apache.avro:avro")
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.kafka:spring-kafka")
}

detekt {
    buildUponDefaultConfig = true
    config = files("config/detekt-config.yml")
    input = files("src/main/kotlin", "src/test/kotlin")
}

licenseReport {
    excludeGroups = ["com.bosch.pt"]
    filters = [new LicenseBundleNormalizer()]
    renderers = [new InventoryHtmlReportRenderer()]
}

publishing {
    publications {
        jar(MavenPublication) {
            artifact sourcesJar
            artifactId = "csm.cloud.common.kafka"
            from components.java
            groupId = "com.bosch.pt"
        }
    }

    repositories {
        maven mavenAzureArtifact
    }
}

release {
    buildTasks = []
    newVersionCommitMessage = "New snapshot version:"
    preTagCommitMessage = "Release:"
    versionPropertyFile = "version.txt"
    git {
        requireBranch.set("master")
    }
}

repositories {
    mavenCentral()
    maven { url "https://packages.confluent.io/maven/" }
    maven mavenAzureArtifact
}
group='com.bosch.pt'
