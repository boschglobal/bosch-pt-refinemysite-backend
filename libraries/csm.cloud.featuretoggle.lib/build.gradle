import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.InventoryHtmlReportRenderer

buildscript {
    ext {
        csmCloudCommonAvroVersion = "10.0.0"
        csmCloudCommonCoreVersion = "12.0.0"
        csmCloudCommonKafkaVersion = "4.0.0"
        csmCloudCommonWebVersion = "8.0.0"
        csmCloudFeaturetoggleAvroVersion = "4.0.0"
        detektVersion = "${externalCatalog.versions.detekt.get()}"
        mavenAzureArtifact = {
            credentials {
                username "AZURE_ARTIFACTS"
                password System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") ?: "$azureArtifactsGradleAccessToken"
            }
            url "https://pkgs.dev.azure.com/pt-iot/_packaging/Artifacts/maven/v1"
        }
        snippetsDir = file("build/generated-snippets")
        springBootVersion = "${externalCatalog.versions.springBoot.get()}"
    }
}

plugins {
    id "jacoco"
    id "java-library"
    id "maven-publish"

    alias(externalCatalog.plugins.dependencyLicenseReport)
    alias(externalCatalog.plugins.detekt)
    alias(externalCatalog.plugins.kotlinJvm)
    alias(externalCatalog.plugins.kotlinPluginSpring)
    alias(externalCatalog.plugins.release)
    alias(externalCatalog.plugins.sonarqube)
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
java.toolchain.languageVersion.set(JavaLanguageVersion.of(21))

//Read version number from version.txt
String versionFromFile = file("version.txt").text.trim()
String versionNumber = versionFromFile.substring(versionFromFile.indexOf("=") + 1)
//If version number is specified by -Pversion=... take it, otherwise take number from file
version = "unspecified".equals(version) ? versionNumber : version

// Task registrations and definitions

configurations {
    tests
}

configurations.all {
    // this avoids a caching snapshot dependencies so that the latest version is always downloaded.
    resolutionStrategy.cacheChangingModulesFor 0, 'minutes'
}

task testJar(type: Jar) {
    archiveClassifier = "tests"
    dependsOn testClasses
    from sourceSets.test.output.classesDirs
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    dependsOn testClasses
    from sourceSets.main.allSource + sourceSets.test.allSource
}

// Configurations in alphabetical order

artifacts {
    archives testJar
    archives sourcesJar
    tests testJar
}

dependencies {
    implementation platform("com.bosch.pt:csm.cloud.dependency.bom-external:${gradle.externalBomVersion}")
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")

    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion")

    implementation("com.bosch.pt:csm.cloud.common.core:$csmCloudCommonCoreVersion")
    implementation("com.bosch.pt:csm.cloud.common.kafka:$csmCloudCommonKafkaVersion")
    implementation("com.bosch.pt:csm.cloud.common.web:$csmCloudCommonWebVersion")
    implementation("com.bosch.pt:csm.cloud.featuretoggle.avro:$csmCloudFeaturetoggleAvroVersion")

    implementation("io.micrometer:micrometer-core")
    implementation("com.datadoghq:dd-trace-api")
    implementation("io.confluent:kafka-avro-serializer")
    implementation("org.apache.kafka:kafka-clients")
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.mongodb:mongodb-driver-core")
    implementation("org.mongodb:mongodb-driver-sync")

    implementation("org.springframework.boot:spring-boot-configuration-processor")
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.kafka:spring-kafka")

    testImplementation("com.bosch.pt:csm.cloud.common.avro:$csmCloudCommonAvroVersion:tests")

    testImplementation("com.ninja-squad:springmockk")
    testImplementation("de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring3x")
    testImplementation("io.mockk:mockk")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.boot:spring-boot-test-autoconfigure")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.testcontainers:kafka")
}

detekt {
    buildUponDefaultConfig = true
    config = files("config/detekt-config.yml")
    input = files("src/main/kotlin", "src/test/kotlin")
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
    }
}

licenseReport {
    excludeGroups = ["com.bosch.pt"]
    filters = [new LicenseBundleNormalizer()]
    renderers = [new InventoryHtmlReportRenderer()]
}

publishing {
    publications {
        jar(MavenPublication) {
            artifact sourcesJar
            artifact testJar
            artifactId = "csm.cloud.featuretoggle.lib"
            from components.java
            groupId = "com.bosch.pt"
        }
    }

    repositories {
        maven mavenAzureArtifact
    }
}

release {
    buildTasks = []
    newVersionCommitMessage = "New snapshot version:"
    preTagCommitMessage = "Release:"
    versionPropertyFile = "version.txt"
    git {
        requireBranch.set("master")
    }
}

repositories {
    mavenCentral()
    maven { url "https://packages.confluent.io/maven/" }
    maven mavenAzureArtifact
}

sonarqube {
    def buildReason = project.hasProperty("BuildReason") && !BuildReason.isEmpty() ? BuildReason : "Build"
    def sourceBranch = project.hasProperty("SourceBranchName") && !SourceBranchName.isEmpty() ? SourceBranchName : "${gitBranch()}-local"

    println "$buildReason for branch $sourceBranch"
    properties {
        property "sonar.projectKey", "csm.cloud.featuretoggle.lib"
        property "sonar.projectName", "csm.cloud.featuretoggle.lib"

        // Disable some rules on some files
        property "sonar.issue.ignore.multicriteria", "k1,k2,k3,k4"

        // Kotlin
        // Cognitive Complexity of functions should not be too high (kotlin:S3776)
        property "sonar.issue.ignore.multicriteria.k1.ruleKey", "kotlin:S3776"
        property "sonar.issue.ignore.multicriteria.k1.resourceKey", "**/*.kt"
        // Track uses of "TO DO" tags (kotlin:S1135)
        property "sonar.issue.ignore.multicriteria.k2.ruleKey", "kotlin:S1135"
        property "sonar.issue.ignore.multicriteria.k2.resourceKey", "**/*.kt"
        // Functions should not have identical implementations (kotlin:S4144)
        property "sonar.issue.ignore.multicriteria.k3.ruleKey", "kotlin:S4144"
        property "sonar.issue.ignore.multicriteria.k3.resourceKey", "**/*.kt"
        // Function has more than 7 parameters
        property "sonar.issue.ignore.multicriteria.k4.ruleKey", "kotlin:S107"
        property "sonar.issue.ignore.multicriteria.k4.resourceKey", "**/*.kt"

        if ("merge" != sourceBranch) {
            property "sonar.branch.name", sourceBranch
        }
    }
}

test {
    finalizedBy jacocoTestReport
    outputs.dir snippetsDir
    useJUnitPlatform()
    doFirst { jvmArgs = ['-Xshare:off'] }
}

static def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}
group='com.bosch.pt'
